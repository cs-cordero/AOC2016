00  addi 4 16 4  IP = 0 + 16  # GOTO 17
01  seti 1 1 1  r1 = 1
02  seti 1 7 3  r3 = 1

03  mulr 1 3 2  r2 = r1 * r3
04  eqrr 2 5 2  r2 = 1 if r2 == r5 (aka 10551264) else 0
05  addr 2 4 4  GOTO 7 if r2 == r5 else GOTO 6
06  addi 4 1 4  GOTO 8
07  addr 1 0 0  r0 = r0 + r1
08  addi 3 1 3  r3 += 1
09  gtrr 3 5 2  r2 = 1 if r3 > r5 (aka 10551264) else 0
10  addr 4 2 4  GOTO 12 if r3 > r5 else GOTO 11
11  seti 2 3 4  GOTO 3
12  addi 1 1 1  r1 += 1
13  gtrr 1 5 2  r2 = 1 if r1 > r5 (aka 10551264) else 0
14  addr 2 4 4  GOTO 16 if r1 > r5 else GOTO 15
15  seti 1 6 4  GOTO 2
16  mulr 4 4 4  EXIT


    # What 01 through 16 is actually doing
    r0 = 0
    for r1 in range(1, 10551264+1):
        for r3 in range(1, 10551264+1):
            if r1 * r3 == r5:
                r0 += r1


# These are the setup steps for getting R5, or the large number it calculates factors for.
17  addi 5 2 5  # r5 = 2
18  mulr 5 5 5  # r5 = 2 * 2
19  mulr 4 5 5  # r5 = (2**2) * 19
20  muli 5 11 5 # r5 = (2**2) * 19 * 11
21  addi 2 1 2  # r2 = 1
22  mulr 2 4 2  # r2 = 1 * 22
23  addi 2 6 2  # r2 = (1 * 22) + 6
24  addr 5 2 5  # r5 = (2**2) * 19 * 11 + 28
25  addr 4 0 4  GOTO 27
26  seti 0 0 4  skipped when r0 == 1 would have taken us back to instruction 1

27  setr 4 5 2  # r2 = 27
28  mulr 2 4 2  # r2 = 27 * 28
29  addr 4 2 2  # r2 = 27 * 28 + 29
30  mulr 4 2 2  # r2 = (27 * 28 + 29) * 30
31  muli 2 14 2 # r2 = (27 * 28 + 29) * 30 * 14
32  mulr 2 4 2  # r2 = (27 * 28 + 29) * 30 * 14 * 32
33  addr 5 2 5  r5 = ((2**2)*19*11+28) + ((27 * 28 + 29) * 30 * 14 * 32)
34  seti 0 5 0  r0 = 0
35  seti 0 2 4  GOTO 1
